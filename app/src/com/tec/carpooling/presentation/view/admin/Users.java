/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tec.carpooling.presentation.view.admin;

/**
 *
 * @author mauricio
 */
public class Users extends javax.swing.JPanel {

    /**
     * Creates new form Users
     */
    public Users() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonInstitutionSave = new javax.swing.JButton();
        jButtonInstitutionUpdate = new javax.swing.JButton();
        jButtonInstitutionDelete = new javax.swing.JButton();
        jScrollPaneInstitution = new javax.swing.JScrollPane();
        jTableInstitution = new javax.swing.JTable();
        jLabelInstitutionDomains = new javax.swing.JLabel();
        jButtonEditDomains = new javax.swing.JButton();
        jLabelInstitutionName = new javax.swing.JLabel();
        jTextFieldInstitutionName = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jButtonInstitutionSave.setText("Save");
        jButtonInstitutionSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstitutionSaveActionPerformed(evt);
            }
        });

        jButtonInstitutionUpdate.setText("Update");
        jButtonInstitutionUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstitutionUpdateActionPerformed(evt);
            }
        });

        jButtonInstitutionDelete.setText("Delete");
        jButtonInstitutionDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstitutionDeleteActionPerformed(evt);
            }
        });

        jTableInstitution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableInstitution.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableInstitutionMouseClicked(evt);
            }
        });
        jScrollPaneInstitution.setViewportView(jTableInstitution);

        jLabelInstitutionDomains.setText("Domains");

        jButtonEditDomains.setText("See/Change");
        jButtonEditDomains.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditDomainsActionPerformed(evt);
            }
        });

        jLabelInstitutionName.setText("Name");

        jTextFieldInstitutionName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInstitutionNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonInstitutionUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonInstitutionDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonInstitutionSave))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelInstitutionName)
                                    .addComponent(jLabelInstitutionDomains, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonEditDomains, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldInstitutionName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26)))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonInstitutionSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonInstitutionUpdate)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonInstitutionDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabelInstitutionName))
                            .addComponent(jTextFieldInstitutionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonEditDomains)
                            .addComponent(jLabelInstitutionDomains))))
                .addGap(48, 48, 48)
                .addComponent(jScrollPaneInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInstitutionSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInstitutionSaveActionPerformed
        String name = jTextFieldInstitutionName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de la institución no puede estar vacío.", "Entrada Inválida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            InstitutionDTO newInstitution = institutionService.registerInstitution(name);
            JOptionPane.showMessageDialog(this, "Institución '" + newInstitution.getName() + "' registrada con ID: " + newInstitution.getId());
            loadInstitutions(); // Recargar la tabla
        } catch (InstitutionManagementException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar: " + e.getMessage(), "Error de Registro", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            // Loggear
            JOptionPane.showMessageDialog(this, "Error inesperado al guardar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonInstitutionSaveActionPerformed

    private void jButtonInstitutionUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInstitutionUpdateActionPerformed
        if (selectedInstitutionId == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una institución de la tabla para actualizar.", "Sin Selección", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String newName = jTextFieldInstitutionName.getText().trim();
        if (newName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de la institución no puede estar vacío.", "Entrada Inválida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            boolean success = institutionService.updateInstitutionName(selectedInstitutionId, newName);
            if (success) {
                JOptionPane.showMessageDialog(this, "Nombre de la institución actualizado.");
                loadInstitutions(); // Recargar tabla
            }
            // El servicio debería lanzar excepción si falla
        } catch (InstitutionManagementException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage(), "Error de Actualización", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            // Loggear
            JOptionPane.showMessageDialog(this, "Error inesperado al actualizar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonInstitutionUpdateActionPerformed

    private void jButtonInstitutionDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInstitutionDeleteActionPerformed
        if (selectedInstitutionId == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una institución de la tabla para eliminar.", "Sin Selección", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmation = JOptionPane.showConfirmDialog(this,
            "¿Está seguro de que desea eliminar la institución seleccionada?\n(ID: " + selectedInstitutionId + " - Nombre: " + jTextFieldInstitutionName.getText() + ")\n¡Esta acción no se puede deshacer!",
            "Confirmar Eliminación",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);

        if (confirmation == JOptionPane.YES_OPTION) {
            try {
                boolean success = institutionService.deleteInstitution(selectedInstitutionId);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Institución eliminada.");
                    loadInstitutions(); // Recargar tabla
                }
                // El servicio debería lanzar excepción si falla
            } catch (InstitutionManagementException e) { // Capturar error específico si existe FK constraint
                JOptionPane.showMessageDialog(this, "Error al eliminar: " + e.getMessage() + "\n(Posiblemente está asociada a usuarios u otros datos).", "Error de Eliminación", JOptionPane.WARNING_MESSAGE);
            }
            catch (Exception e) {
                // Loggear
                JOptionPane.showMessageDialog(this, "Error inesperado al eliminar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonInstitutionDeleteActionPerformed

    private void jTableInstitutionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInstitutionMouseClicked
        int selectedRow = jTableInstitution.getSelectedRow();
        if (selectedRow >= 0) {
            // Obtener datos de la fila seleccionada
            // Columna 0 es ID (Long), Columna 1 es Nombre (String)
            selectedInstitutionId = (Long) institutionTableModel.getValueAt(selectedRow, 0);
            String selectedName = (String) institutionTableModel.getValueAt(selectedRow, 1);

            // Actualizar campo de texto
            jTextFieldInstitutionName.setText(selectedName);

            // Habilitar/deshabilitar botones
            jButtonInstitutionSave.setEnabled(false); // No guardar nuevo si hay selección
            jButtonInstitutionUpdate.setEnabled(true);
            jButtonInstitutionDelete.setEnabled(true);
            jButtonEditDomains.setEnabled(true);

        } else {
            clearSelectionAndFields(); // Limpiar si no hay fila válida
        }
    }//GEN-LAST:event_jTableInstitutionMouseClicked

    private void jButtonEditDomainsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditDomainsActionPerformed
        if (selectedInstitutionId == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una institución de la tabla.", "Sin Selección", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtener la ventana padre
        java.awt.Window owner = SwingUtilities.getWindowAncestor(this);
        // Crear y mostrar el diálogo, pasando el ID
        DomainsDialog dialog = new DomainsDialog((Frame) owner, true, selectedInstitutionId);
        dialog.setVisible(true);

        // El diálogo se encarga de guardar los cambios, no necesitamos hacer nada aquí después de que cierre.
        // Si necesitaras refrescar algo en ESTE panel después de que el diálogo cierre,
        // podrías añadir un listener al diálogo o hacer que devuelva un valor.
    }//GEN-LAST:event_jButtonEditDomainsActionPerformed

    private void jTextFieldInstitutionNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInstitutionNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInstitutionNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEditDomains;
    private javax.swing.JButton jButtonInstitutionDelete;
    private javax.swing.JButton jButtonInstitutionSave;
    private javax.swing.JButton jButtonInstitutionUpdate;
    private javax.swing.JLabel jLabelInstitutionDomains;
    private javax.swing.JLabel jLabelInstitutionName;
    private javax.swing.JScrollPane jScrollPaneInstitution;
    private javax.swing.JTable jTableInstitution;
    private javax.swing.JTextField jTextFieldInstitutionName;
    // End of variables declaration//GEN-END:variables
}
