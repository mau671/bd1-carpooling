/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.tec.carpooling.presentation.view.admin;

import com.tec.carpooling.data.connection.DatabaseConnection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleTypes;
import java.util.Map;
import java.util.HashMap;

/**
 *
 * @author mauricio
 */
public class Domains extends javax.swing.JDialog {
    private final int institutionId;
    private final String institutionName;
    private final DefaultTableModel tableModel;
    private int selectedDomainId = -1;
    private String selectedDomainName = "";

    /**
     * Creates new form Domains
     */
    public Domains(javax.swing.JFrame parent, boolean modal, int institutionId, String institutionName) {
        super(parent, modal);
        this.institutionId = institutionId;
        this.institutionName = institutionName;
        this.tableModel = new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Domain", "Enabled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        
        initComponents();
        setLocationRelativeTo(parent);
        setTitle("Manage Domains - " + institutionName);
        
        // Centrar el contenido
        setResizable(true);
        pack();
        setLocationRelativeTo(null);
        
        loadDomains();
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSeeDomains = new javax.swing.JTable();
        jButtonAceptar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jLabelDomainName = new javax.swing.JLabel();
        jTextFieldDomainName = new javax.swing.JTextField();
        jButtonDomainSave = new javax.swing.JButton();
        jButtonDomainUpdate = new javax.swing.JButton();
        jButtonDomainDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableSeeDomains.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enabled", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableSeeDomains);

        jButtonAceptar.setText("Aceptar");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jLabelDomainName.setText("Name");

        jButtonDomainSave.setText("Save");
        jButtonDomainSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDomainSaveActionPerformed(evt);
            }
        });

        jButtonDomainUpdate.setText("Update");
        jButtonDomainUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDomainUpdateActionPerformed(evt);
            }
        });

        jButtonDomainDelete.setText("Delete");
        jButtonDomainDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDomainDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jButtonAceptar)
                            .addGap(28, 28, 28)
                            .addComponent(jButtonCancelar))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jLabelDomainName)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldDomainName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonDomainUpdate)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDomainDelete)
                            .addComponent(jButtonDomainSave))))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDomainName)
                    .addComponent(jTextFieldDomainName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDomainSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDomainUpdate)
                    .addComponent(jButtonDomainDelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAceptar)
                    .addComponent(jButtonCancelar))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDomains() {
        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement stmt = conn.prepareCall("{ ? = call ADM.ADM_INST_DOM_PKG.get_avail_dom(?) }")) {
            
            stmt.registerOutParameter(1, OracleTypes.CURSOR);
            stmt.setInt(2, institutionId);
            stmt.execute();
            
            ResultSet rs = (ResultSet) stmt.getObject(1);
            tableModel.setRowCount(0);
            
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getInt("enabled") == 1
                });
            }
            
            jTableSeeDomains.setModel(tableModel);
            jTableSeeDomains.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableSeeDomains.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTableSeeDomains.getColumnModel().getColumn(2).setPreferredWidth(80);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar dominios: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveDomainChanges() {
        try (Connection conn = DatabaseConnection.getConnection()) {
            // Primero obtenemos el estado actual de los dominios
            Map<Integer, Boolean> currentState = new HashMap<>();
            try (CallableStatement stmt = conn.prepareCall("{ ? = call ADM.ADM_INST_DOM_PKG.get_avail_dom(?) }")) {
                stmt.registerOutParameter(1, OracleTypes.CURSOR);
                stmt.setInt(2, institutionId);
                stmt.execute();
                
                ResultSet rs = (ResultSet) stmt.getObject(1);
                while (rs.next()) {
                    currentState.put(rs.getInt("id"), rs.getInt("enabled") == 1);
                }
            }
            
            // Ahora procesamos solo los cambios
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                int domainId = (int) tableModel.getValueAt(i, 0);
                boolean newEnabled = (boolean) tableModel.getValueAt(i, 2);
                boolean oldEnabled = currentState.getOrDefault(domainId, false);
                
                // Solo procesamos si el estado cambió
                if (newEnabled != oldEnabled) {
                    CallableStatement stmt;
                    if (newEnabled) {
                        stmt = conn.prepareCall("{ call ADM.ADM_INST_DOM_PKG.add_dom_to_inst(?, ?) }");
                    } else {
                        stmt = conn.prepareCall("{ call ADM.ADM_INST_DOM_PKG.rem_dom_from_inst(?, ?) }");
                    }
                    
                    stmt.setInt(1, institutionId);
                    stmt.setInt(2, domainId);
                    stmt.execute();
                }
            }
            
            JOptionPane.showMessageDialog(this,
                "Asociaciones de dominios actualizadas exitosamente.",
                "Éxito",
                JOptionPane.INFORMATION_MESSAGE);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Error al guardar cambios de dominios: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addNewDomain() {
        String domainName = jTextFieldDomainName.getText().trim();
        if (domainName.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Domain name cannot be empty.",
                "Invalid Input",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement stmt = conn.prepareCall("{ call ADM.ADM_DOM_PKG.create_dom(?, ?) }")) {
            
            stmt.setString(1, domainName);
            stmt.registerOutParameter(2, java.sql.Types.INTEGER);
            stmt.execute();
            
            int newDomainId = stmt.getInt(2);
            tableModel.addRow(new Object[]{newDomainId, domainName, false});
            jTextFieldDomainName.setText("");
            
            JOptionPane.showMessageDialog(this,
                "Domain added successfully.",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Error adding domain: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void editSelectedDomain() {
        if (selectedDomainId == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a domain to edit.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String newName = jTextFieldDomainName.getText().trim();
        if (newName.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Domain name cannot be empty.",
                "Invalid Input",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement stmt = conn.prepareCall("{ call ADM.ADM_DOM_PKG.update_dom(?, ?) }")) {
            
            stmt.setInt(1, selectedDomainId);
            stmt.setString(2, newName);
            stmt.execute();
            
            // Update the table
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                if ((int) tableModel.getValueAt(i, 0) == selectedDomainId) {
                    tableModel.setValueAt(newName, i, 1);
                    break;
                }
            }
            
            jTextFieldDomainName.setText("");
            selectedDomainId = -1;
            selectedDomainName = "";
            
            JOptionPane.showMessageDialog(this,
                "Domain updated successfully.",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Error updating domain: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteSelectedDomain() {
        if (selectedDomainId == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a domain to delete.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this domain?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.getConnection();
                 CallableStatement stmt = conn.prepareCall("{ call ADM.ADM_DOM_PKG.delete_dom(?) }")) {
                
                stmt.setInt(1, selectedDomainId);
                stmt.execute();
                
                // Remove from table
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    if ((int) tableModel.getValueAt(i, 0) == selectedDomainId) {
                        tableModel.removeRow(i);
                        break;
                    }
                }
                
                jTextFieldDomainName.setText("");
                selectedDomainId = -1;
                selectedDomainName = "";
                
                JOptionPane.showMessageDialog(this,
                    "Domain deleted successfully.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                    "Error deleting domain: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {
        saveDomainChanges();
        dispose();
    }

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    private void jButtonDomainSaveActionPerformed(java.awt.event.ActionEvent evt) {
        addNewDomain();
    }

    private void jButtonDomainUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        editSelectedDomain();
    }

    private void jButtonDomainDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        deleteSelectedDomain();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Domains.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Domains.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Domains.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Domains.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                javax.swing.JFrame parentFrame = new javax.swing.JFrame();
                Domains dialog = new Domains(parentFrame, true, 1, "Test Institution");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonDomainDelete;
    private javax.swing.JButton jButtonDomainSave;
    private javax.swing.JButton jButtonDomainUpdate;
    private javax.swing.JLabel jLabelDomainName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSeeDomains;
    private javax.swing.JTextField jTextFieldDomainName;
    // End of variables declaration//GEN-END:variables
}
