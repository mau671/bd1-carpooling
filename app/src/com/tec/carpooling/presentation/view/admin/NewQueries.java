/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tec.carpooling.presentation.view.admin;

import com.github.lgooddatepicker.components.DatePicker;
import com.tec.carpooling.data.connection.DatabaseConnection;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Types;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleTypes;

/**
 *
 * @author mauricio
 */
public class NewQueries extends javax.swing.JPanel {
    private Connection connection;
    
    /**
     * Creates new form NewQueries
     */
    public NewQueries() {
        initComponents();
        setupListeners();
        setupValidations();
        updateDatePickersVisibility();
        try {
            connection = DatabaseConnection.getConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al conectar con la base de datos: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabelQuery = new javax.swing.JLabel();
        jComboBoxQuery = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldLimitOfQuerysToShow = new javax.swing.JTextField();
        jLabelAmountOfQueryRecords = new javax.swing.JLabel();
        jLabelAmountOfQueryRecordsValue = new javax.swing.JLabel();
        datePickerFrom = new com.github.lgooddatepicker.components.DatePicker();
        jLabelFrom = new javax.swing.JLabel();
        jLabelTo = new javax.swing.JLabel();
        datePickerTo = new com.github.lgooddatepicker.components.DatePicker();
        jButtonQuery = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabelQuery.setText("Query");

        jComboBoxQuery.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Top drivers by service count", "Top waypoints within selected date range", "Top active users", "Complete trip details", "Average driver revenue", "New users in the last three months" }));

        jLabel1.setText("Limit");

        jLabelAmountOfQueryRecords.setText("Amount of queried records:");

        jLabelFrom.setText("From");

        jLabelTo.setText("To");

        jButtonQuery.setText("Query");
        jButtonQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelQuery)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBoxQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabelFrom)
                                    .addComponent(jLabelTo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(datePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldLimitOfQuerysToShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(datePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonQuery))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelAmountOfQueryRecords)
                        .addGap(42, 42, 42)
                        .addComponent(jLabelAmountOfQueryRecordsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelQuery)
                    .addComponent(jComboBoxQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldLimitOfQuerysToShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTo)
                    .addComponent(jButtonQuery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAmountOfQueryRecords)
                    .addComponent(jLabelAmountOfQueryRecordsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setupListeners() {
        jComboBoxQuery.addActionListener(e -> updateDatePickersVisibility());
        jTextFieldLimitOfQuerysToShow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!Character.isDigit(c)) {
                    evt.consume();
                }
            }
        });
    }
    
    private void setupValidations() {
        jTextFieldLimitOfQuerysToShow.setText("5"); // Valor por defecto
    }
    
    private void updateDatePickersVisibility() {
        boolean showDatePickers = jComboBoxQuery.getSelectedIndex() == 1; // Top waypoints
        datePickerFrom.setVisible(showDatePickers);
        datePickerTo.setVisible(showDatePickers);
        jLabelFrom.setVisible(showDatePickers);
        jLabelTo.setVisible(showDatePickers);
    }
    
    private void jButtonQueryActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int limit = Integer.parseInt(jTextFieldLimitOfQuerysToShow.getText());
            if (limit <= 0) {
                JOptionPane.showMessageDialog(this, "El lÃ­mite debe ser mayor a 0");
                return;
            }
            
            DefaultTableModel model = new DefaultTableModel();
            CallableStatement cstmt = null;
            ResultSet rs = null;
            
            switch (jComboBoxQuery.getSelectedIndex()) {
                case 0: // Top drivers
                    cstmt = connection.prepareCall("{call ADM.GET_TOP_DRIVERS(?, ?)}");
                    cstmt.setInt(1, limit);
                    cstmt.registerOutParameter(2, OracleTypes.CURSOR);
                    model.addColumn("PosiciÃ³n");
                    model.addColumn("Conductor");
                    model.addColumn("Servicios");
                    break;
                    
                case 1: // Top waypoints
                    if (datePickerFrom.getDate() == null || datePickerTo.getDate() == null) {
                        JOptionPane.showMessageDialog(this, "Seleccione ambas fechas");
                        return;
                    }
                    LocalDate fromDate = datePickerFrom.getDate();
                    LocalDate toDate = datePickerTo.getDate();
                    cstmt = connection.prepareCall("{call ADM.GET_TOP_WAYPOINTS(?, ?, ?, ?)}");
                    cstmt.setDate(1, java.sql.Date.valueOf(fromDate));
                    cstmt.setDate(2, java.sql.Date.valueOf(toDate));
                    cstmt.setInt(3, limit);
                    cstmt.registerOutParameter(4, OracleTypes.CURSOR);
                    model.addColumn("PosiciÃ³n");
                    model.addColumn("Distrito");
                    model.addColumn("Pasajeros");
                    break;
                    
                case 2: // Top active users
                    cstmt = connection.prepareCall("{call ADM.GET_TOP_ACTIVE_USERS(?, ?)}");
                    cstmt.setInt(1, limit);
                    cstmt.registerOutParameter(2, OracleTypes.CURSOR);
                    model.addColumn("PosiciÃ³n");
                    model.addColumn("Usuario");
                    model.addColumn("Viajes");
                    break;
                    
                case 3: // Complete trip details
                    cstmt = connection.prepareCall("{call ADM.GET_COMPLETE_TRIPS(?, ?)}");
                    cstmt.setInt(1, limit);
                    cstmt.registerOutParameter(2, OracleTypes.CURSOR);
                    model.addColumn("ID Viaje");
                    model.addColumn("Conductor");
                    model.addColumn("VehÃ­culo");
                    model.addColumn("Pasajero");
                    model.addColumn("Inicio");
                    model.addColumn("Fin");
                    model.addColumn("Precio");
                    model.addColumn("Moneda");
                    break;
                    
                case 4: // Average driver revenue
                    cstmt = connection.prepareCall("{call ADM.GET_AVERAGE_DRIVER_REVENUE(?, ?)}");
                    cstmt.setInt(1, limit);
                    cstmt.registerOutParameter(2, OracleTypes.CURSOR);
                    model.addColumn("PosiciÃ³n");
                    model.addColumn("Conductor");
                    model.addColumn("Ingreso Promedio");
                    model.addColumn("Moneda");
                    break;
                    
                case 5: // New users last 3 months
                    cstmt = connection.prepareCall("{call ADM.GET_NEW_USERS_LAST_3_MONTHS(?)}");
                    cstmt.registerOutParameter(1, OracleTypes.CURSOR);
                    model.addColumn("Mes");
                    model.addColumn("Nuevos Usuarios");
                    break;
            }
            
            cstmt.execute();
            switch (jComboBoxQuery.getSelectedIndex()) {
                case 0: // Top drivers
                case 2: // Top active users
                case 3: // Complete trip details
                case 4: // Average driver revenue
                    rs = (ResultSet) cstmt.getObject(2);
                    break;
                case 1: // Top waypoints
                    rs = (ResultSet) cstmt.getObject(4);
                    break;
                case 5: // New users last 3 months
                    rs = (ResultSet) cstmt.getObject(1);
                    break;
            }
            
            int rowCount = 0;
            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model.addRow(row);
                rowCount++;
            }
            
            jTable1.setModel(model);
            jLabelAmountOfQueryRecordsValue.setText(String.valueOf(rowCount));
            
            rs.close();
            cstmt.close();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar la consulta: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePickerFrom;
    private com.github.lgooddatepicker.components.DatePicker datePickerTo;
    private javax.swing.JButton jButtonQuery;
    private javax.swing.JComboBox<String> jComboBoxQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAmountOfQueryRecords;
    private javax.swing.JLabel jLabelAmountOfQueryRecordsValue;
    private javax.swing.JLabel jLabelFrom;
    private javax.swing.JLabel jLabelQuery;
    private javax.swing.JLabel jLabelTo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldLimitOfQuerysToShow;
    // End of variables declaration//GEN-END:variables
}
