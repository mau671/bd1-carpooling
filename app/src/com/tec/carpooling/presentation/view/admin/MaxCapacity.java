/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tec.carpooling.presentation.view.admin;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import com.tec.carpooling.data.connection.DatabaseConnection;
import oracle.jdbc.OracleTypes;

/**
 *
 * @author mauricio
 */
public class MaxCapacity extends javax.swing.JPanel {

    private DefaultTableModel maxCapacityTableModel;
    private Long selectedMaxCapacityId = null;

    public MaxCapacity() {
        initComponents();
        initTableModel();
        loadMaxCapacities();
        jButtonInstitutionUpdate.setEnabled(false);
        jButtonInstitutionDelete.setEnabled(false);
    }

    private void initTableModel() {
        maxCapacityTableModel = new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Capacidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jTableInstitution.setModel(maxCapacityTableModel);
        
        // Ajustar el ancho de las columnas
        if (jTableInstitution.getColumnModel().getColumnCount() > 0) {
            jTableInstitution.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableInstitution.getColumnModel().getColumn(1).setPreferredWidth(200);
        }
    }

    private void loadMaxCapacities() {
        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement cstmt = conn.prepareCall("{ call ADM.LIST_MAX_CAPACITIES(?) }")) {
            
            cstmt.registerOutParameter(1, OracleTypes.CURSOR);
            cstmt.execute();
            
            try (ResultSet rs = (ResultSet) cstmt.getObject(1)) {
                maxCapacityTableModel.setRowCount(0);
                while (rs.next()) {
                    maxCapacityTableModel.addRow(new Object[]{
                        rs.getLong("id"),
                        rs.getInt("capacity_number")
                    });
                }
            }
            clearSelectionAndFields();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar las capacidades m√°ximas: " + e.getMessage(), 
                "Error de Carga", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearSelectionAndFields() {
        jTableInstitution.clearSelection();
        jTextFieldInstitutionName.setText("");
        selectedMaxCapacityId = null;
        jButtonInstitutionUpdate.setEnabled(false);
        jButtonInstitutionDelete.setEnabled(false);
        jButtonInstitutionSave.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelInstitutionName = new javax.swing.JLabel();
        jTextFieldInstitutionName = new javax.swing.JTextField();
        jButtonInstitutionSave = new javax.swing.JButton();
        jButtonInstitutionUpdate = new javax.swing.JButton();
        jButtonInstitutionDelete = new javax.swing.JButton();
        jScrollPaneInstitution = new javax.swing.JScrollPane();
        jTableInstitution = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jLabelInstitutionName.setText("Name");

        jTextFieldInstitutionName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInstitutionNameActionPerformed(evt);
            }
        });

        jButtonInstitutionSave.setText("Save");
        jButtonInstitutionSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstitutionSaveActionPerformed(evt);
            }
        });

        jButtonInstitutionUpdate.setText("Update");
        jButtonInstitutionUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstitutionUpdateActionPerformed(evt);
            }
        });

        jButtonInstitutionDelete.setText("Delete");
        jButtonInstitutionDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstitutionDeleteActionPerformed(evt);
            }
        });

        jTableInstitution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableInstitution.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableInstitutionMouseClicked(evt);
            }
        });
        jScrollPaneInstitution.setViewportView(jTableInstitution);
        if (jTableInstitution.getColumnModel().getColumnCount() > 0) {
            jTableInstitution.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableInstitution.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonInstitutionUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonInstitutionDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonInstitutionSave))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelInstitutionName)
                                .addGap(38, 38, 38)
                                .addComponent(jTextFieldInstitutionName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonInstitutionSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonInstitutionUpdate)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonInstitutionDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabelInstitutionName))
                            .addComponent(jTextFieldInstitutionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48)
                .addComponent(jScrollPaneInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldInstitutionNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInstitutionNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInstitutionNameActionPerformed

    private void jButtonInstitutionSaveActionPerformed(java.awt.event.ActionEvent evt) {
        String capacityStr = jTextFieldInstitutionName.getText().trim();
        if (capacityStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La capacidad no puede estar vac√≠a.", "Entrada Inv√°lida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int capacity = Integer.parseInt(capacityStr);
            if (capacity <= 0) {
                JOptionPane.showMessageDialog(this, "La capacidad debe ser mayor que 0.", "Entrada Inv√°lida", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try (Connection conn = DatabaseConnection.getConnection();
                 CallableStatement cstmt = conn.prepareCall("{ call ADM.INSERT_MAX_CAPACITY(?) }")) {
                
                cstmt.setInt(1, capacity);
                cstmt.execute();
                
                JOptionPane.showMessageDialog(this, "Capacidad m√°xima '" + capacity + "' registrada exitosamente.");
                loadMaxCapacities();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un n√∫mero v√°lido para la capacidad.", "Entrada Inv√°lida", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException e) {
            String errorMessage = e.getMessage();
            if (errorMessage.contains("ORA-20071")) {
                JOptionPane.showMessageDialog(this, 
                    "Error al insertar la capacidad m√°xima: " + errorMessage.substring(errorMessage.indexOf(":") + 1), 
                    "Error de Guardado", 
                    JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Error al guardar la capacidad m√°xima: " + errorMessage, 
                    "Error de Guardado", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jButtonInstitutionUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedMaxCapacityId == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una capacidad m√°xima de la tabla para actualizar.", "Sin Selecci√≥n", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String capacityStr = jTextFieldInstitutionName.getText().trim();
        if (capacityStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La capacidad no puede estar vac√≠a.", "Entrada Inv√°lida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int capacity = Integer.parseInt(capacityStr);
            if (capacity <= 0) {
                JOptionPane.showMessageDialog(this, "La capacidad debe ser mayor que 0.", "Entrada Inv√°lida", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try (Connection conn = DatabaseConnection.getConnection();
                 CallableStatement cstmt = conn.prepareCall("{ call ADM.UPDATE_MAX_CAPACITY(?, ?) }")) {
                
                cstmt.setLong(1, selectedMaxCapacityId);
                cstmt.setInt(2, capacity);
                cstmt.execute();
                
                JOptionPane.showMessageDialog(this, "Capacidad m√°xima actualizada exitosamente.");
                loadMaxCapacities();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un n√∫mero v√°lido para la capacidad.", "Entrada Inv√°lida", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException e) {
            String errorMessage = e.getMessage();
            if (errorMessage.contains("ORA-20072")) {
                JOptionPane.showMessageDialog(this, 
                    "No se encontr√≥ la capacidad m√°xima con ID: " + selectedMaxCapacityId, 
                    "Error de Actualizaci√≥n", 
                    JOptionPane.ERROR_MESSAGE);
            } else if (errorMessage.contains("ORA-20073")) {
                JOptionPane.showMessageDialog(this, 
                    "Error al actualizar la capacidad m√°xima: " + errorMessage.substring(errorMessage.indexOf(":") + 1), 
                    "Error de Actualizaci√≥n", 
                    JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Error al actualizar la capacidad m√°xima: " + errorMessage, 
                    "Error de Actualizaci√≥n", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jButtonInstitutionDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedMaxCapacityId == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una capacidad m√°xima de la tabla para eliminar.", "Sin Selecci√≥n", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmation = JOptionPane.showConfirmDialog(this,
                "¬øEst√° seguro que desea eliminar la capacidad m√°xima seleccionada?\n(ID: " + selectedMaxCapacityId + " - Capacidad: " + jTextFieldInstitutionName.getText() + ")\n¬°Esta acci√≥n no se puede deshacer!",
                "Confirmar Eliminaci√≥n",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirmation == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.getConnection();
                 CallableStatement cstmt = conn.prepareCall("{ call ADM.DELETE_MAX_CAPACITY(?) }")) {
                
                cstmt.setLong(1, selectedMaxCapacityId);
                cstmt.execute();
                
                JOptionPane.showMessageDialog(this, "Capacidad m√°xima eliminada exitosamente.");
                loadMaxCapacities();
            } catch (SQLException e) {
                String errorMessage = e.getMessage();
                if (errorMessage.contains("ORA-20074")) {
                    JOptionPane.showMessageDialog(this, 
                        "No se puede eliminar la capacidad m√°xima porque est√° siendo utilizada en relaciones veh√≠culo-capacidad.", 
                        "Error de Eliminaci√≥n", 
                        JOptionPane.ERROR_MESSAGE);
                } else if (errorMessage.contains("ORA-20075")) {
                    JOptionPane.showMessageDialog(this, 
                        "No se encontr√≥ la capacidad m√°xima con ID: " + selectedMaxCapacityId, 
                        "Error de Eliminaci√≥n", 
                        JOptionPane.ERROR_MESSAGE);
                } else if (errorMessage.contains("ORA-20076")) {
                    JOptionPane.showMessageDialog(this, 
                        "Error al eliminar la capacidad m√°xima: " + errorMessage.substring(errorMessage.indexOf(":") + 1), 
                        "Error de Eliminaci√≥n", 
                        JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, 
                        "Error al eliminar la capacidad m√°xima: " + errorMessage, 
                        "Error de Eliminaci√≥n", 
                        JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void jTableInstitutionMouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = jTableInstitution.getSelectedRow();
        if (selectedRow >= 0) {
            selectedMaxCapacityId = (Long) maxCapacityTableModel.getValueAt(selectedRow, 0);
            Integer selectedCapacity = (Integer) maxCapacityTableModel.getValueAt(selectedRow, 1);

            jTextFieldInstitutionName.setText(selectedCapacity.toString());

            jButtonInstitutionSave.setEnabled(false);
            jButtonInstitutionUpdate.setEnabled(true);
            jButtonInstitutionDelete.setEnabled(true);
        } else {
            clearSelectionAndFields();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonInstitutionDelete;
    private javax.swing.JButton jButtonInstitutionSave;
    private javax.swing.JButton jButtonInstitutionUpdate;
    private javax.swing.JLabel jLabelInstitutionName;
    private javax.swing.JScrollPane jScrollPaneInstitution;
    private javax.swing.JTable jTableInstitution;
    private javax.swing.JTextField jTextFieldInstitutionName;
    // End of variables declaration//GEN-END:variables
}
