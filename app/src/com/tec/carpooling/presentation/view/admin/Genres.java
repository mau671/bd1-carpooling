package com.tec.carpooling.presentation.view.admin;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import com.tec.carpooling.data.connection.DatabaseConnection;

/**
 *
 * @author mauricio
 */
public class Genres extends javax.swing.JPanel {

    private DefaultTableModel genderTableModel;
    private Long selectedGenderId = null;

    public Genres() {
        initComponents();
        initTableModel();
        loadGenders();
        jButtonGenresUpdate.setEnabled(false);
        jButtonGenresDelete.setEnabled(false);
    }

    private void initTableModel() {
        genderTableModel = new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jTableGenres.setModel(genderTableModel);
    }

    private void loadGenders() {
        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement cstmt = conn.prepareCall("{call carpooling_adm.list_genders()}");
             ResultSet rs = cstmt.executeQuery()) {
            
            genderTableModel.setRowCount(0);
            while (rs.next()) {
                genderTableModel.addRow(new Object[]{
                    rs.getLong("id"),
                    rs.getString("name")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error loading genders: " + e.getMessage(), 
                "Load Error", 
                JOptionPane.ERROR_MESSAGE);
        }
        clearSelectionAndFields();
    }
    
   private void clearSelectionAndFields() {
        jTableGenres.clearSelection();
        jTextFieldGenresName.setText("");
        selectedGenderId = null;
        jButtonGenresUpdate.setEnabled(false);
        jButtonGenresDelete.setEnabled(false);
        jButtonGenresSave.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelGenresName = new javax.swing.JLabel();
        jTextFieldGenresName = new javax.swing.JTextField();
        jButtonGenresSave = new javax.swing.JButton();
        jButtonGenresUpdate = new javax.swing.JButton();
        jButtonGenresDelete = new javax.swing.JButton();
        jScrollPanelGenres = new javax.swing.JScrollPane();
        jTableGenres = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jLabelGenresName.setText("Name");

        jTextFieldGenresName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldGenresNameActionPerformed(evt);
            }
        });

        jButtonGenresSave.setText("Save");
        jButtonGenresSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenresSaveActionPerformed(evt);
            }
        });

        jButtonGenresUpdate.setText("Update");
        jButtonGenresUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenresUpdateActionPerformed(evt);
            }
        });

        jButtonGenresDelete.setText("Delete");
        jButtonGenresDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenresDeleteActionPerformed(evt);
            }
        });

        jTableGenres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableGenresMouseClicked(evt);
            }
        });
        jScrollPanelGenres.setViewportView(jTableGenres);
        if (jTableGenres.getColumnModel().getColumnCount() > 0) {
            jTableGenres.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableGenres.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonGenresUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonGenresDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonGenresSave))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPanelGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelGenresName)
                                .addGap(38, 38, 38)
                                .addComponent(jTextFieldGenresName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGenresSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonGenresUpdate)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonGenresDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabelGenresName))
                            .addComponent(jTextFieldGenresName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48)
                .addComponent(jScrollPanelGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldGenresNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldGenresNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldGenresNameActionPerformed

    private void jButtonGenresSaveActionPerformed(java.awt.event.ActionEvent evt) {
        String name = jTextFieldGenresName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gender name cannot be empty.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement cstmt = conn.prepareCall("{call carpooling_adm.insert_gender(?)}")) {
            
            cstmt.setString(1, name);
            cstmt.execute();
            
            JOptionPane.showMessageDialog(this, "Gender '" + name + "' registered successfully.");
            loadGenders();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error saving gender: " + e.getMessage(), 
                "Save Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButtonGenresUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGenderId == null) {
            JOptionPane.showMessageDialog(this, "Please select a gender from the table to update.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

         String newName = jTextFieldGenresName.getText().trim();
        if (newName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gender name cannot be empty.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             CallableStatement cstmt = conn.prepareCall("{call carpooling_adm.update_gender(?, ?)}")) {
            
            cstmt.setLong(1, selectedGenderId);
            cstmt.setString(2, newName);
            cstmt.execute();
            
            JOptionPane.showMessageDialog(this, "Gender updated successfully.");
            loadGenders();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error updating gender: " + e.getMessage(), 
                "Update Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButtonGenresDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGenderId == null) {
            JOptionPane.showMessageDialog(this, "Please select a gender from the table to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the selected gender?\n(ID: " + selectedGenderId + " - Name: " + jTextFieldGenresName.getText() + ")\nThis action cannot be undone!",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirmation == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.getConnection();
                 CallableStatement cstmt = conn.prepareCall("{call carpooling_adm.delete_gender(?)}")) {
                
                cstmt.setLong(1, selectedGenderId);
                cstmt.execute();
                
                JOptionPane.showMessageDialog(this, "Gender deleted successfully.");
                loadGenders();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, 
                    "Error deleting gender: " + e.getMessage() + "\n(Possibly associated with persons or other data).", 
                    "Delete Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jTableGenresMouseClicked(java.awt.event.MouseEvent evt) {
       int selectedRow = jTableGenres.getSelectedRow();
       if (selectedRow >= 0) {
            selectedGenderId = (Long) genderTableModel.getValueAt(selectedRow, 0);
            String selectedName = (String) genderTableModel.getValueAt(selectedRow, 1);

           jTextFieldGenresName.setText(selectedName);

            jButtonGenresSave.setEnabled(false);
           jButtonGenresUpdate.setEnabled(true);
           jButtonGenresDelete.setEnabled(true);
       } else {
            clearSelectionAndFields();
        }
       }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenresDelete;
    private javax.swing.JButton jButtonGenresSave;
    private javax.swing.JButton jButtonGenresUpdate;
    private javax.swing.JLabel jLabelGenresName;
    private javax.swing.JScrollPane jScrollPanelGenres;
    private javax.swing.JTable jTableGenres;
    private javax.swing.JTextField jTextFieldGenresName;
    // End of variables declaration//GEN-END:variables
}
